import java.awt.MenuShortcut

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group = 'koto_thing'
version = '1.0.0'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// エンコーディング設定
compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    // JSON processing
    implementation 'com.google.code.gson:gson:2.10.1'
    // Icon library
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1'
    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

// アプリケーション設定
application {
    mainModule = 'kotothing.voicevalidator'
    mainClass = 'koto_thing.voiceover_validator.VoiceoverValidationApp'
}

// テスト設定
test {
    useJUnitPlatform()
}

// 配布設定
distributions {
    main {
        distributionBaseName = 'VoiceValidator'
        contents {
            from('README.md')
            from('CHANGELOG.md')
            from('requirements.txt')
            from('start_voice_validator.bat')
        }
    }
}

// チェックサム生成タスク
task generateChecksums {
    dependsOn distTar, distZip
    doLast {
        def distributionsDir = file("$buildDir/distributions")
        distributionsDir.listFiles().each { file ->
            if (file.isFile() && (file.name.endsWith('.tar') || file.name.endsWith('.zip'))) {
                def checksumFile = new File(distributionsDir, "${file.name}.sha256")
                def hash = java.security.MessageDigest.getInstance("SHA-256")
                file.withInputStream { stream ->
                    byte[] buffer = new byte[8192]
                    int bytesRead
                    while ((bytesRead = stream.read(buffer)) != -1) {
                        hash.update(buffer, 0, bytesRead)
                    }
                }
                def hashString = hash.digest().collect { String.format('%02x', it) }.join('')
                checksumFile.text = "${hashString}  ${file.name}\n"
                println "Generated checksum for ${file.name}: ${hashString}"
            }
        }
    }
}

// ビルド時に自動的にチェックサムを生成
assemble.finalizedBy generateChecksums
